package com.harnet.whatisthedistance.viewModel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import com.harnet.whatisthedistance.model.di.DaggerStationsApiServiceComponent
import com.harnet.whatisthedistance.model.retrofit.StationsApiService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import javax.inject.Inject
import kotlin.coroutines.CoroutineContext

open class BaseViewModel(application: Application) : AndroidViewModel(application), CoroutineScope {
    private val job = Job()

    @Inject
    lateinit var stationsApiService: StationsApiService

    init {
        // instantiate autogenerated DaggerComponent class
        val stationsApiServiceComponent = DaggerStationsApiServiceComponent.create()
        //inject all dependencies to the class
        stationsApiServiceComponent.inject(this)
    }

    // when running job finishes -  Main thread have been returned
    override val coroutineContext: CoroutineContext
        get() = job + Dispatchers.Main

    // when BaseViewModel clears
    override fun onCleared() {
        super.onCleared()
        job.cancel()
    }
}